# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ObjectDetectionDockWidget
                                 A QGIS plugin
 Auto objects detection
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-02-16
        git sha              : $Format:%H$
        copyright            : (C) 2023 by minhhieu
        email                : minhhieun4@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt.QtCore import pyqtSignal

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'object_detection_dockwidget_base.ui'))


class ObjectDetectionDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(ObjectDetectionDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

# import requests
# import os
# from qgis.PyQt import QtGui, QtWidgets, uic
# from qgis.core import QgsGeometry, QgsPointXY, QgsPolygon, QgsRectangle, QgsWkbTypes
# from qgis.PyQt.QtCore import Qt, pyqtSignal
# from qgis.PyQt.QtGui import QColor, QPainter
# from qgis.PyQt.QtWidgets import QAction, QDockWidget, QFrame, QHBoxLayout, QLabel, QLineEdit, QPushButton, QVBoxLayout, QWidget

# FORM_CLASS, _ = uic.loadUiType(os.path.join(
#     os.path.dirname(__file__), 'object_detection_dockwidget_base.ui'))


# class ObjectDetectionDockWidget(QDockWidget, FORM_CLASS):
#     closingPlugin = pyqtSignal()
#     def __init__(self, parent=None):
#         super().__init__(parent)
#         self.setObjectName("ObjectDetectionDockWidget")

#         # Create a label to display the status of the API request
#         self.status_label = QLabel("")

#         # Create a line edit to enter the API URL
#         self.url_edit = QLineEdit("https://api.example.com/detect")

#         # Create a button to trigger the API request
#         self.detect_button = QPushButton("Detect Objects")
#         self.detect_button.clicked.connect(self.detect_objects)

#         # Create a frame to display the rectangle drawn by the user
#         self.frame = QFrame()
#         self.frame.setFrameStyle(QFrame.StyledPanel | QFrame.Sunken)
#         self.frame.setMinimumSize(200, 200)
#         self.frame.mousePressEvent = self.mouse_press_event
#         self.frame.paintEvent = self.paint_event

#         # Create a layout to organize the UI elements
#         layout = QVBoxLayout()
#         layout.addWidget(self.status_label)
#         layout.addWidget(self.url_edit)
#         layout.addWidget(self.detect_button)
#         layout.addWidget(self.frame)

#         # Create a widget to hold the layout
#         widget = QWidget()
#         widget.setLayout(layout)

#         # Set the widget as the dock widget's widget
#         self.setWidget(widget)
#         self.rectangle_start = None
#         self.rectangle_end = None

#     def mouse_press_event(self, event):
#         if event.button() == Qt.LeftButton:
#             self.rectangle_start = event.pos()
#             self.rectangle_end = None
#             self.frame.update()


#     def paint_event(self, event):
#         painter = QPainter(self.frame)
#         painter.setPen(QColor(255, 255, 255))
#         painter.setBrush(QColor(255, 255, 255, 100))
#         if self.rectangle_end is not None:
#             rectangle = QgsRectangle(self.rectangle_start, self.rectangle_end)
#             polygon = QgsPolygon.fromRect(rectangle)
#             painter.drawPolygon(polygon)

#     def detect_objects(self):
#         # Get the API URL from the line edit
#         url = self.url_edit.text()

#         # Create a rectangle from the start and end points of the user-drawn rectangle
#         rectangle = QgsRectangle(self.rectangle_start, self.rectangle_end)

#         # Make a request to the API with the rectangle's coordinates
#         data = {
#             "xmin": rectangle.xMinimum(),
#             "ymin": rectangle.yMinimum(),
#             "xmax": rectangle.xMaximum(),
#             "ymax": rectangle.yMaximum(),
#         }
#         response = requests.post(url, json=data)

#         # Parse the response to get the polygon coordinates
#         if response.status_code == 200:
#             polygon_data = response.json()
#             polygon_coordinates = polygon_data.get("coordinates", [])
#             polygon = QgsGeometry.fromWkt(f"POLYGON(({polygon_coordinates}))")
            
#             # Create a new memory layer to hold the generated polygon
#             layer = QgsVectorLayer("Polygon?crs=EPSG:4326", "Generated Polygon", "memory")
#             provider = layer.dataProvider()
#             features = [QgsFeature()]
#             features[0].setGeometry(polygon)
#             provider.addFeatures(features)

#             # Add a text symbol to each polygon as a label
#             label_settings = QgsPalLayerSettings()
#             label_settings.fieldName = "label"
#             label_settings.isExpression = True
#             label_settings.enabled = True
#             label_settings.placement = QgsPalLayerSettings.AroundPoint
#             label_settings.drawLabels = True
#             label_settings.writeToLayer(layer)

#             # Add the layer to the map
#             QgsProject.instance().addMapLayer(layer)

#             # Do something with the polygon
#             # ...
#         else:
#             self.status_label.setText("Error: Failed to detect objects")



#     def closeEvent(self, event):
#         self.closingPlugin.emit()
#         event.accept()